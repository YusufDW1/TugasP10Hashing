/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hashing;

import java.io.File;
import javax.swing.JFileChooser;

/**
 *
 * @author YusufDS
 */
public class HashingApp extends javax.swing.JFrame {

    /**
     * Creates new form HashingApp
     */
    private String readFileAsString(String filePath) {
        try {
            return new String(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(filePath)));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public HashingApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtInput = new javax.swing.JTextField();
        btnPBKDF2 = new javax.swing.JButton();
        btnBCrypt = new javax.swing.JButton();
        btnScrypt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        btnBrowseFile = new javax.swing.JButton();
        txtFilePath = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPBKDF2.setText("PBKDF2");
        btnPBKDF2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPBKDF2ActionPerformed(evt);
            }
        });

        btnBCrypt.setText("BCrypt");
        btnBCrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBCryptActionPerformed(evt);
            }
        });

        btnScrypt.setText("Scrypt");
        btnScrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScryptActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        btnBrowseFile.setText("Pilih File");
        btnBrowseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(btnPBKDF2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBCrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnScrypt)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnBrowseFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseFile)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPBKDF2)
                    .addComponent(btnBCrypt)
                    .addComponent(btnScrypt))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPBKDF2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPBKDF2ActionPerformed
        try {
            String input;
            if (!txtFilePath.getText().isBlank()) {
                input = readFileAsString(txtFilePath.getText());
            } else {
                input = txtInput.getText();
            }

            if (input == null || input.isBlank()) {
                txtOutput.setText("Input kosong. Silakan isi teks atau pilih file.");
                return;
            }

            String hash = PBKDF2Hash.hash(input);
            txtOutput.setText(hash);
        } catch (Exception e) {
            e.printStackTrace();
            txtOutput.setText("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnPBKDF2ActionPerformed

    private void btnBCryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBCryptActionPerformed
        try {
            String input = !txtFilePath.getText().isBlank()
                    ? readFileAsString(txtFilePath.getText())
                    : txtInput.getText();

            if (input == null || input.isBlank()) {
                txtOutput.setText("Input kosong. Silakan isi teks atau pilih file.");
                return;
            }

            String hash = BCryptHash.hash(input);
            txtOutput.setText(hash);
        } catch (Exception e) {
            e.printStackTrace();
            txtOutput.setText("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBCryptActionPerformed

    private void btnScryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScryptActionPerformed
        try {
            String input = !txtFilePath.getText().isBlank()
                    ? readFileAsString(txtFilePath.getText())
                    : txtInput.getText();

            if (input == null || input.isBlank()) {
                txtOutput.setText("Input kosong. Silakan isi teks atau pilih file.");
                return;
            }

            String hash = ScryptHash.hash(input);
            txtOutput.setText(hash);
        } catch (Exception e) {
            e.printStackTrace();
            txtOutput.setText("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnScryptActionPerformed

    private void btnBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtFilePath.setText(selectedFile.getAbsolutePath());
            String fileContent = readFileAsString(selectedFile.getAbsolutePath());
            txtInput.setText(fileContent);
        }
    }//GEN-LAST:event_btnBrowseFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HashingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HashingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HashingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HashingApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HashingApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBCrypt;
    private javax.swing.JButton btnBrowseFile;
    private javax.swing.JButton btnPBKDF2;
    private javax.swing.JButton btnScrypt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables
}
